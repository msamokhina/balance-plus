import Foundation

enum TransactionsSortType: CaseIterable {
    case byDate
    case byAmount
    
    var name: String {
        switch self {
        case .byDate: return "–ü–æ –¥–∞—Ç–µ"
        case .byAmount: return "–ü–æ —Å—É–º–º–µ"
        }
    }
}

final class MockTransactionsService: TransactionsServiceProtocol {
    private(set) var mockTransactions: [Transaction] = []
    private var nextID: Int = 0 // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

    private let mockAccount = BankAccount(
        id: 0, userId: 0, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç", balance: 1000.00, currency: .rub,
        createdAt: Date().addingTimeInterval(-86400 * 30), updatedAt: Date().addingTimeInterval(-86400 * 30)
    )
    
    private let mockSalaryCategory = Category(id: 1, name: "–ó–∞—Ä–ø–ª–∞—Ç–∞", emoji: "üí∞", direction: .income)
    private let mockFoodCategory = Category(id: 101, name: "–ï–¥–∞ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã", emoji: "üçî", direction: .outcome)
    private let mockTransportCategory = Category(id: 102, name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", emoji: "üöó", direction: .outcome)
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–ª–Ω—è–µ—Ç –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
    init() {
        setupInitialMockData()
    }

    private func setupInitialMockData() {
        let formatter = ISO8601DateFormatter()
        formatter.formatOptions = [.withInternetDateTime, .withFractionalSeconds]

        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        let now = Date()
        let oneDayAgo = now.addingTimeInterval(-24 * 60 * 60)
        let twoDaysAgo = now.addingTimeInterval(-2 * 24 * 60 * 60)
        let threeDaysAgo = now.addingTimeInterval(-3 * 24 * 60 * 60)
        let tenDaysAgo = now.addingTimeInterval(-10 * 24 * 60 * 60)
        let twentyDaysAgo = now.addingTimeInterval(-20 * 24 * 60 * 60)
        let fourtyDaysAgo = now.addingTimeInterval(-40 * 24 * 60 * 60)


        mockTransactions = [
            Transaction(
                id: nextID, account: mockAccount, category: mockSalaryCategory, amount: 52000.00,
                transactionDate: now, comment: nil, createdAt: tenDaysAgo, updatedAt: tenDaysAgo
            ),
            Transaction(
                id: nextID + 1, account: mockAccount, category: mockFoodCategory, amount: 750.50,
                transactionDate: now, comment: "–ü—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∞", createdAt: threeDaysAgo, updatedAt: threeDaysAgo
            ),
            Transaction(
                id: nextID + 2, account: mockAccount, category: mockTransportCategory, amount: 90.00,
                transactionDate: now, comment: "–ü–æ–µ–∑–¥–∫–∞ –Ω–∞ –º–µ—Ç—Ä–æ", createdAt: twoDaysAgo, updatedAt: twoDaysAgo
            ),
            Transaction(
                id: nextID + 3, account: mockAccount, category: mockFoodCategory, amount: 950.00,
                transactionDate: oneDayAgo, comment: "–û–±–µ–¥ –≤ –∫–∞—Ñ–µ", createdAt: oneDayAgo, updatedAt: oneDayAgo
            ),
            Transaction(
                id: nextID + 4, account: mockAccount, category: mockSalaryCategory, amount: 5000.00,
                transactionDate: now, comment: "–ü—Ä–µ–º–∏—è", createdAt: now, updatedAt: now
            ),
            Transaction(
                id: nextID + 5, account: mockAccount, category: mockSalaryCategory, amount: 50000.00,
                transactionDate: fourtyDaysAgo, comment: "–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–∞–π", createdAt: now, updatedAt: now
            ),
            Transaction(
                id: nextID + 6, account: mockAccount, category: mockSalaryCategory, amount: 51000.00,
                transactionDate: twentyDaysAgo, comment: "–ê–≤–∞–Ω—Å –∑–∞ –∏—é–Ω—å", createdAt: now, updatedAt: now
            )
        ]
        nextID += mockTransactions.count
    }

    func fetchTransactions(accountId: Int = 0, from startDate: Date, to endDate: Date) async throws -> [Transaction] {
        // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        try await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã

        return mockTransactions.filter { transaction in
            transaction.transactionDate >= startDate && transaction.transactionDate <= endDate
        }.sorted { $0.transactionDate < $1.transactionDate }
    }
    
    func fetchTransaction(id: Int) async throws -> Transaction {
        try await Task.sleep(nanoseconds: 500_000_000)
        
        return mockTransactions.first(where: { $0.id == id })!
    }
    
    func createTransaction(accountId: Int, categoryId: Int, amount: String, transactionDate: Date, comment: String) async throws {
        // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        try await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã

        mockTransactions[0]
    }

    func updateTransaction(_ transaction: Transaction) async throws -> Transaction {
        // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        try await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã

        guard let index = mockTransactions.firstIndex(where: { $0.id == transaction.id }) else {
            // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            throw MockServiceError.notFound(message: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å ID \(transaction.id) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        }

        var updatedTransaction = transaction
        updatedTransaction.updatedAt = Date() // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

        mockTransactions[index] = updatedTransaction
        print("MockTransactionsService: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å ID \(updatedTransaction.id) –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return updatedTransaction
    }

    func deleteTransaction(id: Int) async throws {
        // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        try await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã

        let initialCount = mockTransactions.count
        mockTransactions.removeAll { $0.id == id }

        if mockTransactions.count == initialCount {
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∑–Ω–∞—á–∏—Ç, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞
            throw MockServiceError.notFound(message: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å ID \(id) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        }
        print("MockTransactionsService: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å ID \(id) —É–¥–∞–ª–µ–Ω–∞")
    }
}

enum MockServiceError: Error {
    case notFound(message: String)

    var errorDescription: String? {
        switch self {
        case .notFound(let message):
            return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ: \(message)"
        }
    }
}
