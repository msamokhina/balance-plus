import Foundation

/// –ü—Ä–æ—Ç–æ–∫–æ–ª, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
protocol TransactionsServiceProtocol {
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    /// - Parameters:
    ///   - startDate: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
    ///   - endDate: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
    /// - Returns: –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ `Transaction`, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
    /// - Throws: –û—à–∏–±–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
    func fetchTransactions(from startDate: Date, to endDate: Date) async throws -> [Transaction]

    /// –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    /// - Parameter transaction: –û–±—ä–µ–∫—Ç `Transaction` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    /// - Returns: –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç `Transaction` —Å –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
    /// - Throws: –û—à–∏–±–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π —Å–æ–∑–¥–∞–Ω–∏—è
    func createTransaction(_ transaction: Transaction) async throws -> Transaction

    /// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    /// - Parameter transaction: –û–±—ä–µ–∫—Ç `Transaction` —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    /// - Returns: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç `Transaction`
    /// - Throws: –û—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    func updateTransaction(_ transaction: Transaction) async throws -> Transaction

    /// –£–¥–∞–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
    /// - Parameter transactionID: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    /// - Throws: –û—à–∏–±–∫–∏, –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    func deleteTransaction(withID transactionID: Int) async throws
}

/// –ú–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
/// –ò–º–∏—Ç–∏—Ä—É–µ—Ç CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ) –Ω–∞–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
final class MockTransactionsService: TransactionsServiceProtocol {
    @Published private var mockTransactions: [Transaction] = []
    private var nextID: Int = 0 // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

    private let mockAccount = BankAccount(
        id: 0, userId: 0, name: "–û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç", balance: 1000.00, currency: .rub,
        createdAt: Date().addingTimeInterval(-86400 * 30), updatedAt: Date().addingTimeInterval(-86400 * 30)
    )
    
    private let mockSalaryCategory = Category(id: 100, name: "–ó–∞—Ä–ø–ª–∞—Ç–∞", emoji: "üí∞", direction: .income)
    private let mockFoodCategory = Category(id: 101, name: "–ï–¥–∞ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã", emoji: "üçî", direction: .outcome)
    private let mockTransportCategory = Category(id: 102, name: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", emoji: "üöó", direction: .outcome)

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–ª–Ω—è–µ—Ç –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
    init() {
        setupInitialMockData()
    }

    private func setupInitialMockData() {
        let formatter = ISO8601DateFormatter()
        formatter.formatOptions = [.withInternetDateTime, .withFractionalSeconds]

        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        let now = Date()
        let oneDayAgo = now.addingTimeInterval(-24 * 60 * 60)
        let twoDaysAgo = now.addingTimeInterval(-2 * 24 * 60 * 60)
        let threeDaysAgo = now.addingTimeInterval(-3 * 24 * 60 * 60)
        let tenDaysAgo = now.addingTimeInterval(-10 * 24 * 60 * 60)


        mockTransactions = [
            Transaction(
                id: nextID, account: mockAccount, category: mockSalaryCategory, amount: 50000.00,
                transactionDate: tenDaysAgo, comment: "–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–∞–π", createdAt: tenDaysAgo, updatedAt: tenDaysAgo
            ),
            Transaction(
                id: nextID + 1, account: mockAccount, category: mockFoodCategory, amount: 750.50,
                transactionDate: threeDaysAgo, comment: "–ü—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∞", createdAt: threeDaysAgo, updatedAt: threeDaysAgo
            ),
            Transaction(
                id: nextID + 2, account: mockAccount, category: mockTransportCategory, amount: 90.00,
                transactionDate: twoDaysAgo, comment: "–ü–æ–µ–∑–¥–∫–∞ –Ω–∞ –º–µ—Ç—Ä–æ", createdAt: twoDaysAgo, updatedAt: twoDaysAgo
            ),
            Transaction(
                id: nextID + 3, account: mockAccount, category: mockFoodCategory, amount: 950.00,
                transactionDate: oneDayAgo, comment: "–û–±–µ–¥ –≤ –∫–∞—Ñ–µ", createdAt: oneDayAgo, updatedAt: oneDayAgo
            ),
            Transaction(
                id: nextID + 4, account: mockAccount, category: mockSalaryCategory, amount: 5000.00,
                transactionDate: now, comment: "–ü—Ä–µ–º–∏—è", createdAt: now, updatedAt: now
            )
        ]
        nextID += mockTransactions.count
    }


    /// –ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    func fetchTransactions(from startDate: Date, to endDate: Date) async throws -> [Transaction] {
        // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        try await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã

        return mockTransactions.filter { transaction in
            transaction.transactionDate >= startDate && transaction.transactionDate <= endDate
        }
    }

    /// –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    func createTransaction(_ transaction: Transaction) async throws -> Transaction {
        // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        try await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã

        let newTransaction = Transaction(
            id: nextID,
            account: transaction.account,
            category: transaction.category,
            amount: transaction.amount,
            transactionDate: transaction.transactionDate,
            comment: transaction.comment,
            createdAt: Date(),
            updatedAt: Date()
        )

        mockTransactions.append(newTransaction)
        nextID += 1
        print("MockTransactionsService: –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å ID \(newTransaction.id)")
        return newTransaction
    }

    /// –ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    func updateTransaction(_ transaction: Transaction) async throws -> Transaction {
        // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        try await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã

        guard let index = mockTransactions.firstIndex(where: { $0.id == transaction.id }) else {
            // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            throw MockServiceError.notFound(message: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å ID \(transaction.id) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        }

        var updatedTransaction = transaction
        updatedTransaction.updatedAt = Date() // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è

        mockTransactions[index] = updatedTransaction
        print("MockTransactionsService: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å ID \(updatedTransaction.id) –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return updatedTransaction
    }

    /// –ò–º–∏—Ç–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ ID
    func deleteTransaction(withID transactionID: Int) async throws {
        // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        try await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã

        let initialCount = mockTransactions.count
        mockTransactions.removeAll { $0.id == transactionID }

        if mockTransactions.count == initialCount {
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –∑–Ω–∞—á–∏—Ç, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞
            throw MockServiceError.notFound(message: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å ID \(transactionID) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        }
        print("MockTransactionsService: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å ID \(transactionID) —É–¥–∞–ª–µ–Ω–∞")
    }
}

enum MockServiceError: Error {
    case notFound(message: String)

    var errorDescription: String? {
        switch self {
        case .notFound(let message):
            return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ: \(message)"
        }
    }
}
