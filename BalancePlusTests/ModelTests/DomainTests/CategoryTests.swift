import XCTest
@testable import BalancePlus

final class CategoryTests: XCTestCase {
    // MARK: - init(from decoder: Decoder) Tests
    
    // –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    func testCategoryDecoding_Success() throws {
        let jsonString = """
        {
            "id": 1,
            "name": "–ó–∞—Ä–ø–ª–∞—Ç–∞",
            "emoji": "üí∞",
            "isIncome": true
        }
        """
        
        guard let jsonData = jsonString.data(using: .utf8) else {
            XCTFail("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É JSON –≤ Data")
            return
        }
        XCTAssertNoThrow(try JSONDecoder().decode(Category.self, from: jsonData), "–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

        do {
            let category = try JSONDecoder().decode(Category.self, from: jsonData)

            XCTAssertEqual(category.id, 1, "ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1")
            XCTAssertEqual(category.name, "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å '–ó–∞—Ä–ø–ª–∞—Ç–∞'")
            XCTAssertEqual(category.emoji, "üí∞", "–≠–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'üí∞'")
            XCTAssertEqual(category.direction, .income, "–ü—Ä–∏–∑–Ω–∞–∫, –≤—Ö–æ–¥—è—â–∞—è –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'true'")

            print("‚úÖ testCategoryDecoding_Success: –£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

        } catch {
            XCTFail("–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: \(error)")
        }
    }

    // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'name'.
    // –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ 'keyNotFound'.
    func testCategoryDecoding_MissingName() {
        let jsonString = """
        {
            "id": 2,
            "emoji": "üöó",
            "isIncome": true
        }
        """

        guard let jsonData = jsonString.data(using: .utf8) else {
            XCTFail("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É JSON –≤ Data")
            return
        }

        XCTAssertThrowsError(try JSONDecoder().decode(Category.self, from: jsonData)) { error in
            guard case .keyNotFound(let key, _) = error as? DecodingError else {
                XCTFail("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ 'keyNotFound' –¥–ª—è –ø–æ–ª—è 'name', –Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: \(error)")
                return
            }
            XCTAssertEqual(key.stringValue, "name", "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –∫–ª—é—á–æ–º 'name'")
            print("‚úÖ testCategoryDecoding_MissingName: –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ 'keyNotFound' –¥–ª—è 'name' –ø–æ–ª—É—á–µ–Ω–∞")
        }
    }

    // –í –ø–æ–ª–µ 'emoji' –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    // –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ 'dataCorrupted'
    func testCategoryDecoding_EmojiNotChar() {
        let jsonString = """
        {
            "id": 1,
            "name": "–ó–∞—Ä–ø–ª–∞—Ç–∞",
            "emoji": "üí∞üí∞",
            "isIncome": true
        }
        """
        
        guard let jsonData = jsonString.data(using: .utf8) else {
            XCTFail("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É JSON –≤ Data")
            return
        }
        
        XCTAssertThrowsError(try JSONDecoder().decode(Category.self, from: jsonData)) { error in
            guard case .dataCorrupted(let context) = error as? DecodingError else {
                XCTFail("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ 'dataCorrupted' –¥–ª—è –ø–æ–ª—è 'emoji', –Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: \(error)")
                return
            }
            XCTAssertTrue(context.codingPath.contains(where: { $0.stringValue == "emoji" }),
                          "–û—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–æ–ª–µ–º 'emoji' –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å")
            print("‚úÖ testCategoryDecoding_EmojiNotChar: –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ 'dataCorrupted' –¥–ª—è emoji –ø–æ–ª—É—á–µ–Ω–∞")
        }
    }
}
