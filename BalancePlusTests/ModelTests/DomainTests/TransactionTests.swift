import XCTest
@testable import BalancePlus

final class TransactionTests: XCTestCase {
    // MARK: - Tests mocks
    
    let mockAccount: BankAccount = {
        let formatter = ISO8601DateFormatter.withFractionalSeconds
        return BankAccount(
            id: 100,
            userId: 1,
            name: "–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç",
            balance: 5000.00,
            currency: .rub,
            createdAt: formatter.date(from: "2025-06-01T10:00:00.000Z")!,
            updatedAt: formatter.date(from: "2025-06-01T10:00:00.000Z")!
        )
    }()
    
    let mockAccountJSONObject: [String: Any] = [
        "id": 100,
        "userId": 1,
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç",
        "balance": "5000.00",
        "currency": "RUB",
        "createdAt": "2025-06-01T10:00:00.000Z",
        "updatedAt": "2025-06-01T10:00:00.000Z"
    ]
    
    let mockCategory: BalancePlus.Category = {
        return Category(
            id: 200,
            name: "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            emoji: "üß™",
            direction: .outcome
        )
    }()

    let mockCategoryJSONObject: [String: Any] = [
        "id": 200,
        "name": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        "emoji": "üß™",
        "isIncome": false
    ]
    
    let formatter = ISO8601DateFormatter.withFractionalSeconds
    // MARK: - jsonObject Tests
    
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π `Transaction` –≤ `jsonObject`
    func testJSONObject_FullTransaction() {
        let transactionID = 1
        let amount: Decimal = 123.45
        let transactionDate = Date().addingTimeInterval(-1000)
        let comment = "–ü–æ–ª–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è"
        let createdAt = Date().addingTimeInterval(-2000)
        let updatedAt = Date()
        let isIncome = false

        let transaction = Transaction(
            id: transactionID,
            account: mockAccount,
            category: mockCategory,
            amount: amount,
            transactionDate: transactionDate,
            comment: comment,
            createdAt: createdAt,
            updatedAt: updatedAt
        )
        
        let json = transaction.jsonObject as? [String: Any] // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ç–∏–ø—É

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ json –Ω–µ nil
        XCTAssertNotNil(json, "jsonObject –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ-nil —Å–ª–æ–≤–∞—Ä—å")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        XCTAssertEqual(json?["id"] as? Int, transactionID, "ID –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(json?["amount"] as? String, amount.description, "Amount –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏ —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(json?["comment"] as? String, comment, "Comment –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        let accountJson = json?["account"] as? [String: Any]
        XCTAssertNotNil(accountJson, "Account –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        XCTAssertEqual(accountJson?["id"] as? Int, mockAccount.id, "ID –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(accountJson?["name"] as? String, mockAccount.name, "–ò–º—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å")

        let categoryJson = json?["category"] as? [String: Any]
        XCTAssertNotNil(categoryJson, "Category –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä–µ–º")
        XCTAssertEqual(categoryJson?["id"] as? Int, mockCategory.id, "ID –≤–ª–æ–∂–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(categoryJson?["name"] as? String, mockCategory.name, "–ò–º—è –≤–ª–æ–∂–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(categoryJson?["isIncome"] as? Bool, isIncome, "–ü—Ä–∏–∑–Ω–∞–∫ –≤—Ö–æ–¥—è—â–µ—Å—Ç–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã
        XCTAssertEqual(json?["transactionDate"] as? String, formatter.string(from: transactionDate), "transactionDate –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        XCTAssertEqual(json?["createdAt"] as? String, formatter.string(from: createdAt), "createdAt –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        XCTAssertEqual(json?["updatedAt"] as? String, formatter.string(from: updatedAt), "updatedAt –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞")

        print("‚úÖ testJSONObject_FullTransaction: –£—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ jsonObject")
    }

    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ `Transaction` —Å `nil` –ø–æ–ª–µ–º `comment` –≤ `jsonObject`
    func testJSONObject_TransactionWithNilComment() {
        let transactionID = 2
        let amount: Decimal = 500.00
        let transactionDate = Date().addingTimeInterval(-200)
        let createdAt = Date().addingTimeInterval(-300)
        let updatedAt = Date().addingTimeInterval(-100)

        let transaction = Transaction(
            id: transactionID,
            account: mockAccount,
            category: mockCategory,
            amount: amount,
            transactionDate: transactionDate,
            comment: nil, // Comment —Ä–∞–≤–µ–Ω nil
            createdAt: createdAt,
            updatedAt: updatedAt
        )

        let json = transaction.jsonObject as? [String: Any]

        XCTAssertNotNil(json, "jsonObject –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ-nil —Å–ª–æ–≤–∞—Ä—å")
        XCTAssertEqual(json?["id"] as? Int, transactionID, "ID –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ "comment" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        XCTAssertNil(json?["comment"], "–ü–æ–ª–µ 'comment' –¥–æ–ª–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–∏ nil")

        print("‚úÖ testJSONObject_TransactionWithNilComment: –£—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å nil-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –≤ jsonObject")
    }

    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ `jsonObject` –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø
    func testJSONObject_ReturnsCorrectType() {
        let transaction = Transaction(
            id: 1,
            account: mockAccount,
            category: mockCategory,
            amount: 100.0,
            transactionDate: Date(),
            comment: "Test",
            createdAt: Date(),
            updatedAt: Date()
        )

        let json = transaction.jsonObject
        XCTAssertTrue(json is [String: Any], "jsonObject –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–∏–ø [String: Any]")
        print("‚úÖ testJSONObject_ReturnsCorrectType: jsonObject –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø")
    }
    
    // MARK: - parse(jsonObject:) Tests
    // MARK: - –¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å: –£—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    
    /// –£—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ `Transaction` –∏–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ `jsonObject`
    func testParseJSONObject_Success() {
        let now = Date()
        let createdAt = now.addingTimeInterval(-100)
        let updatedAt = now.addingTimeInterval(-50)

        let jsonObject: [String: Any] = [
            "id": 1,
            "account": mockAccountJSONObject,
            "category": mockCategoryJSONObject,
            "amount": "123.45",
            "transactionDate": formatter.string(from: now),
            "comment": "–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è",
            "createdAt": formatter.string(from: createdAt),
            "updatedAt": formatter.string(from: updatedAt)
        ]

        let transaction = Transaction.parse(jsonObject: jsonObject)

        XCTAssertNotNil(transaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å nil –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        XCTAssertEqual(transaction?.id, 1)
        XCTAssertEqual(transaction?.amount, Decimal(string: "123.45"))
        XCTAssertEqual(transaction?.comment, "–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è")
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Account –∏ Category —Ç–æ–∂–µ Codable –∏ –∏—Ö jsonObject/parse —Ä–∞–±–æ—Ç–∞—é—Ç)
        XCTAssertEqual(transaction?.account.id, 100)
        XCTAssertEqual(transaction?.category.name, "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        
        XCTAssertEqual(transaction?.transactionDate, formatter.date(from: jsonObject["transactionDate"] as! String))
        XCTAssertEqual(transaction?.createdAt, formatter.date(from: jsonObject["createdAt"] as! String))
        XCTAssertEqual(transaction?.updatedAt, formatter.date(from: jsonObject["updatedAt"] as! String))

        print("‚úÖ testParseJSONObject_Success: –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è")
    }
    
    // MARK: - –¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å: –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ 'comment' (nil)

    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ `parse` –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ 'comment'
    func testParseJSONObject_NoComment_Success() {
        let jsonObject: [String: Any] = [
            "id": 1,
            "account": mockAccountJSONObject,
            "category": mockCategoryJSONObject,
            "amount": "123.45",
            "transactionDate": formatter.string(from: Date()),
            // "comment" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            "createdAt": formatter.string(from: Date()),
            "updatedAt": formatter.string(from: Date())
        ]

        let transaction = Transaction.parse(jsonObject: jsonObject)

        XCTAssertNotNil(transaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å nil –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ 'comment'")
        XCTAssertNil(transaction?.comment, "–ü–æ–ª–µ 'comment' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å nil –ø—Ä–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤ JSON")
        print("‚úÖ testParseJSONObject_NoComment_Success: –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    }

    // MARK: - –¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç `jsonObject`

    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ `parse` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `nil`, –µ—Å–ª–∏ `jsonObject` –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º ([String: Any])
    func testParseJSONObject_NotADictionary_ReturnsNil() {
        let jsonObject: Any = ["invalid_object", 123, true]

        let transaction = Transaction.parse(jsonObject: jsonObject)
        XCTAssertNil(transaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å nil, –µ—Å–ª–∏ jsonObject –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º")
        print("‚úÖ testParseJSONObject_NotADictionary_ReturnsNil: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∫–æ—Ä–Ω–µ–≤–æ–≥–æ jsonObject")
    }
    
    // MARK: - –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ `parse` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `nil` –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–ª—è 'id'
    func testParseJSONObject_MissingID_ReturnsNil() {
        var jsonObject: [String: Any] = [
            "userId": 1, // –ü—Ä–∏–º–µ—Ä –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–æ –Ω–µ id
            "account": mockAccountJSONObject,
            "category": mockCategoryJSONObject,
            "amount": "123.45",
            "transactionDate": formatter.string(from: Date()),
            "createdAt": formatter.string(from: Date()),
            "updatedAt": formatter.string(from: Date())
        ]
        jsonObject.removeValue(forKey: "id") // –£–¥–∞–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ

        let transaction = Transaction.parse(jsonObject: jsonObject)
        XCTAssertNil(transaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å nil –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ 'id'")
        print("‚úÖ testParseJSONObject_MissingID_ReturnsNil: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ 'id'")
    }
    
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ `parse` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `nil` –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–ª—è 'account'
    func testParseJSONObject_MissingAccount_ReturnsNil() {
        let jsonObject: [String: Any] = [
            "id": 1,
            // "account": mockAccountJSONObject, // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            "category": mockCategoryJSONObject,
            "amount": "123.45",
            "transactionDate": formatter.string(from: Date()),
            "createdAt": formatter.string(from: Date()),
            "updatedAt": formatter.string(from: Date())
        ]

        let transaction = Transaction.parse(jsonObject: jsonObject)
        XCTAssertNil(transaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å nil –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ 'account'")
        print("‚úÖ testParseJSONObject_MissingAccount_ReturnsNil: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ 'account'")
    }
    
    // MARK: - –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ `parse` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `nil` –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ç–∏–ø–µ 'id'
    func testParseJSONObject_InvalidIDType_ReturnsNil() {
        let jsonObject: [String: Any] = [
            "id": "1", // String –≤–º–µ—Å—Ç–æ Int
            "account": mockAccountJSONObject,
            "category": mockCategoryJSONObject,
            "amount": "123.45",
            "transactionDate": formatter.string(from: Date()),
            "createdAt": formatter.string(from: Date()),
            "updatedAt": formatter.string(from: Date())
        ]

        let transaction = Transaction.parse(jsonObject: jsonObject)
        XCTAssertNil(transaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å nil –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ç–∏–ø–µ 'id'")
        print("‚úÖ testParseJSONObject_InvalidIDType_ReturnsNil: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø 'id'")
    }

    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ `parse` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `nil` –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ 'amount'
    func testParseJSONObject_InvalidAmountFormat_ReturnsNil() {
        let jsonObject: [String: Any] = [
            "id": 1,
            "account": mockAccountJSONObject,
            "category": mockCategoryJSONObject,
            "amount": "not_a_decimal", // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Decimal
            "transactionDate": formatter.string(from: Date()),
            "comment": "–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è",
            "createdAt": formatter.string(from: Date()),
            "updatedAt": formatter.string(from: Date())
        ]

        let transaction = Transaction.parse(jsonObject: jsonObject)
        XCTAssertNil(transaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å nil –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ 'amount'")
        print("‚úÖ testParseJSONObject_InvalidAmountFormat_ReturnsNil: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 'amount'")
    }

    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ `parse` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `nil` –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã
    func testParseJSONObject_InvalidDateFormat_ReturnsNil() {
        let jsonObject: [String: Any] = [
            "id": 1,
            "account": mockAccountJSONObject,
            "category": mockCategoryJSONObject,
            "amount": "123.45",
            "transactionDate": "invalid-date-string", // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            "comment": "–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è",
            "createdAt": formatter.string(from: Date()),
            "updatedAt": formatter.string(from: Date())
        ]

        let transaction = Transaction.parse(jsonObject: jsonObject)
        XCTAssertNil(transaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å nil –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã")
        print("‚úÖ testParseJSONObject_InvalidDateFormat_ReturnsNil: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
    }

    // MARK: - –¢–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã

    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ `parse` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `nil` –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–ª–æ–∂–µ–Ω–Ω–æ–º 'account'
    func testParseJSONObject_InvalidNestedAccount_ReturnsNil() {
        let invalidAccountJSONObject: [String: Any] = [
            // "id": 2, // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç id
            "name": "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å—á–µ—Ç",
            "balance": "100.00",
            "currency": "USD"
        ]

        let jsonObject: [String: Any] = [
            "id": 1,
            "account": invalidAccountJSONObject, // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            "category": mockCategoryJSONObject,
            "amount": "123.45",
            "transactionDate": formatter.string(from: Date()),
            "comment": "–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è",
            "createdAt": formatter.string(from: Date()),
            "updatedAt": formatter.string(from: Date())
        ]

        let transaction = Transaction.parse(jsonObject: jsonObject)
        XCTAssertNil(transaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å nil –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–ª–æ–∂–µ–Ω–Ω–æ–º 'account'")
        print("‚úÖ testParseJSONObject_InvalidNestedAccount_ReturnsNil: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π 'account'")
    }

    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ `parse` –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `nil` –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–ª–æ–∂–µ–Ω–Ω–æ–º 'category'
    func testParseJSONObject_InvalidNestedCategory_ReturnsNil() {
        let invalidCategoryJSONObject: [String: Any] = [
            "id": 201,
            "name": "–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            "emoji": "üçïüçî", // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —ç–º–æ–¥–∑–∏ (–±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞)
            "isIncome": true
        ]

        let jsonObject: [String: Any] = [
            "id": 1,
            "account": mockAccountJSONObject,
            "category": invalidCategoryJSONObject, // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            "amount": "123.45",
            "transactionDate": formatter.string(from: Date()),
            "comment": "–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è",
            "createdAt": formatter.string(from: Date()),
            "updatedAt": formatter.string(from: Date())
        ]

        let transaction = Transaction.parse(jsonObject: jsonObject)
        XCTAssertNil(transaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å nil –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ–π 'category'")
        print("‚úÖ testParseJSONObject_InvalidNestedCategory_ReturnsNil: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–ª–æ–∂–µ–Ω–Ω–∞—è 'category'")
    }
    
    // MARK: - init?(csvRow: String) Tests
    
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ `init` –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—É—é csv —Å—Ç—Ä–æ–∫—É –≤ `Transaction`
    func testInitFromCSV_Success() {
        let transactionID = 3
        let accountId = 1
        let categoryId = 105
        let amount: Decimal = 3500.00
        let transactionDate = formatter.date(from: "2025-06-01T10:00:00.000Z")
        let comment = "–ù–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞"
        let createdAt = formatter.date(from: "2025-06-01T10:00:00.000Z")
        let updatedAt = formatter.date(from: "2025-06-01T10:00:00.000Z")
        
        let csvRow: String = "3,1,105,3500.00,2025-06-01T10:00:00.000Z,–ù–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞,2025-06-01T10:00:00.000Z,2025-06-01T10:00:00.000Z"
        let transaction: Transaction? = Transaction(csvRow: csvRow)
        
        XCTAssertNotNil(transaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–µ CSV")
        
        XCTAssertEqual(transaction?.id, transactionID, "ID –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(transaction?.account.id, accountId, "accountId –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(transaction?.category.id, categoryId, "categoryId –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(transaction?.amount, amount, "Amount –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")
        XCTAssertEqual(transaction?.comment, comment, "Comment –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã
        XCTAssertEqual(transaction?.transactionDate, transactionDate, "transactionDate –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        XCTAssertEqual(transaction?.createdAt, createdAt, "createdAt –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        XCTAssertEqual(transaction?.updatedAt, updatedAt, "updatedAt –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞")

        print("‚úÖ testInitFromCSV_Success: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ CSV")
    }

    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ `init` –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ 'comment'
    func testInitFromCSV_Success_NoComment() {
        let csvRow: String = "3,1,105,3500.00,2025-06-01T10:00:00.000Z,,2025-06-01T10:00:00.000Z,2025-06-01T10:00:00.000Z" // –ü—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        
        let transaction = Transaction(csvRow: csvRow)
        
        XCTAssertNotNil(transaction)
        XCTAssertNil(transaction?.comment) // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ comment —Å—Ç–∞–ª nil
        print("‚úÖ testInitFromCSV_Success_NoComment: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ CSV —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º")
    }
    
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ `init`  –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `nil` –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    func testInitFromCSV_InvalidColumnCount_ReturnsNil() {
        let csvRow = "1,100,200,50.0,2025-06-01T10:00:00.000Z" // –ú–µ–Ω—å—à–µ 8 —Å—Ç–æ–ª–±—Ü–æ–≤
        let transaction = Transaction(csvRow: csvRow)
    
        XCTAssertNil(transaction)
        print("‚úÖ testInitFromCSV_InvalidColumnCount_ReturnsNil: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ CSV —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç–æ–ª–±—Ü–æ–≤")
    }
}
